'''
-----------------------------------------------------------------------------
Description: 

A script to generate VASP input files including INCAR, KPOINTS, POTCAR and
vasp_job.sh script.

Important notes:

(1) Before running this script, check if your VASP_Pseudopotentials library
has following structure:

        VASP_Pseudopotentials (root directory)
                          |
       ---------------------------------------
      |         |         |         |         |
     PAW     PAW_GGA   PAW_PBE     US       US_GGA

(2) Specify the location of VASP_pseudopotentials library of your machine.
You need to find the following line: 

PPS_dirs_path = ""

and modify it, like:
PPS_dirs_path = "/home/shuang/softwares/VASP/Pseudopotentials"

(3) To generate the POTCAR, the geometry file POSCAR is needed. Make sure 
it's in the working directory!

(4) The vasp_job.sh script generated by VASPIN_GEN.py is a template of job 
script to run VASP. You can modify the part of 'VASP_Run_scprit generator' 
based on your machine environment.

-----------------------------------------------------------------------------
Author: ShuangLeung (sleung1924@gmail.com)                         
Date of last version: 2020/03/30
-----------------------------------------------------------------------------
'''

import os, stat, sys, re, linecache

#========================================= POTCAR_generator =========================================

print("="*92)

# set the location of VASP pseudopotentials
# Add the absolute path of VASP_pseudopotentials library of your machine!!! 
# For example: PPS_dirs_path = "/home/shuang/softwares/VASP/Pseudopotentials"
PPS_dirs_path = ""

# initialize POTCAR file
if os.path.exists("POTCAR"):
    with open("POTCAR", "r+") as f:
        f.truncate()

# detect the POSCAR file
if os.path.exists("POSCAR"):
    element_types = (linecache.getline('POSCAR',6)).split( ) # obtain the element_types in POSCAR

else:
    print("POSCAR file doesn't exist, generating POTCAR fails! Please try again!\n")
    sys.exit(0)

print("+"+"-"*90+"+")

# select the pseudopotentials(PP)
inputstr = input("Pseudopotentials options:\n\n %s %s %s %s %s %s" % ("1: PAW_LDA;\n",
								      "2: PAW_PW91;\n",
								      "3: PAW_PBE;\n",
                                                                      "4: US_LDA;\n",
								      "5: US_GGA.\n",
								      "\n--->>Enter your option:"))
PP_option = inputstr.strip()
PP_dict = {"1":"PAW","2":"PAW_GGA","3":"PAW_PBE","4":"US","5":"US_GGA"}
# set the default PP option
if PP_option not in PP_dict.keys():
    print("\n*** WARNING: The input has syntax errors. Select the PAW_PPE PP automatically. ***\n")
    PP_option = "3"

print("+"+"-"*90+"+")

# get the path of PP ("PAW_LDA/PAW_GGA/PAW_PBE/US/US_GGA") directory 
# and the names of its sub-folders
PP_dirs_path = os.path.join(PPS_dirs_path,'%s'% PP_dict[PP_option])
PP_dirs = os.listdir(PP_dirs_path)

# specify the PP_version of the corresponding element
print("We note that your POSCAR has following elements: %s" % (' '.join(element_types)))

for element in element_types:
    PP_versions = []
    for PP_dir in PP_dirs:
        matchObj = re.match(r'%s[0-9_.]|%s\b'%(element,element),"%s"%PP_dir)
        if matchObj != None:
            PP_versions.append(PP_dir)

    # For the element which has more than one PP_version, selection is needed.
    if len(PP_versions) > 1:
        print("\nFor element %s, several versions of pseudopotentials are available:\n"%element)
        # version counts
        version_count = 1
        version_options = {}
        for v in PP_versions:
            version_options["%s"%version_count] = v
            print("%d:%s"%(version_count,v))
            version_count +=1

        inputstr = input("\n--->>>Your option:")
        version_option = inputstr.strip()
        # set the default version_option
        if version_option not in version_options.keys():
	        print("\n*** WARNING: The input has syntax errors. Select the standard version automatically. ***\n")
	        version_option = "1"

        # get the POTCAR path of specialized PP version
        potcar_dirs_path = os.path.join(PP_dirs_path,version_options["%s"%version_option])

    else:
        potcar_dirs_path = os.path.join(PP_dirs_path,PP_versions[0])
        
    pot_file = os.path.join(potcar_dirs_path,"POTCAR")

    #write the POTCAR file
    with open('POTCAR','a') as f_total:
        f = open("%s"%pot_file,'r')
        file_detial = f.read()
        f_total.write(file_detial)

print("+"+"-"*90+"+\n")

#========================================= INCAR_generator =========================================

with open('INCAR','w') as f:
	f.writelines('''SYSTEM = sl1924

#====== Startparameter for this run ======
NCORE = 4
#ISYM = 1
ISTART = 0 #new job
ICHARG = 2 #charge densities: 1-file CHGCAR 2-atom 10-const
ENCUT  = 500
PREC = A
LREAL = A
ALGO = N #algorithm
ISMEAR = 0 #part. occupancies
SIGMA = 0.02 #broadening in eV
#ADDGRID = .TRUE.

#====== Electronic Relaxation ======
EDIFF = 1E-5
NELM = 600 #nr. of electronic steps
AMIX = 0.2
BMIX = 0.0001 # almost zero, but 0 will crash some versions
AMIX MAG = 0.8
BMIX MAG = 0.0001 # almost zero, but 0 will crash some versions

#====== Ionic Relaxation ======
EDIFFG = -0.01
POTIM = 0.35 #time-step for ion-motion (fs)
NSW = 500
IBRION = 2 #ionic relaxation: 0-MD 1-quasi-New 2-conjugate-gradient(CG)
ISIF = 3 #calculate stress and determine what to relax 

#====== spin polarized calculation ======
#ISPIN= 2 # (2-yes 1-no)
#MAGMOM #initial mag moment/atom

#====== SOC calculation ======
#LSORBIT = .TRUE.
#LNONCOLLINEAR = F #non collinear calculations
#LMAXMIX = 4 # for d elements increase LMAXMIX to 4, f: LMAXMIX = 6 !
#SAXIS = x y z # direction of the magnetic field
#NBANDS = 2 * number of bands of collinear run
#GGA_COMPAT = .FALSE. # apply spherical cutoff on gradient field

#====== vdW setting ======
#------ DFT-TS ------
#IVDW= 2
#VDW_RADIUS = 50.0 #cutoff radius (A) for pair interactions
#VDW_S6 = 1.00 #global scaling factor s6
#VDW_SR = 0.94 #scaling factor sR
#VDW_D = 20.0 #damping parameter d
#LVDW_EWALD = .TRUE.

#------ DFT-D3 ------
#IVDW= 11 # 11 Grimme; 12 Becke-Jonson damping

#------ vdw-DF2 ------
#GGA = ML
#LUSE_VDW = .T.
#Zab_vdw = -1.8867
#AGGAC = 0.0000
 
#====== DOS ======
#NBANDS= 246 
#EMIN= -10
#EMAX= 10
#NEDOS= 800

#====== Dipole corrections ======
#LMONO  = F # monopole corrections only (constant potential shift)
#LDIPOL = F # correct potential (dipole corrections)
#IDIPOL = 0 #1-x, 2-y, 3-z, 4-all directions 
#EPSILON= 1.0000000 #bulk dielectric constant

#====== OUTPUT CONTROL ======
LCHARG = .FALSE. # write CHGCAR
LWAVE = .FALSE. # write WAVECAR
#LVTOT = .FALSE. # write LOCPOT, total local potential
#LVHAR = .FALSE. # write LOCPOT, Hartree potential only
#LELF = .FALSE. # write electronic localiz. function (ELF)
LORBIT = 11 #not read RWIGS line in INCAR and create PROOUT
''')

#========================================= KPOINTS_generator =========================================

with open('KPOINTS','w') as f:
	f.writelines('''Automatic generation
0
Monhkorst-Pack
1 1 1
0.0 0.0 0.0
''')

#===================================== VASP_Run_scprit generator ====================================

with open('vasp_job.sh','w') as f:
    f.writelines('''#!/bin/bash
#PBS -l nodes=1:ppn=24
#PBS -l walltime=500:00:00
#PBS -N Si
#PBS -q batch
#PBS -j oe

cd $PBS_O_WORKDIR

#Linux PART
ulimit -s unlimited
ulimit -n unlimited
ulimit -l unlimited

EXEC=/home/shuang/softwares/VASP/bin/vasp_std
NCORE=`cat $PBS_NODEFILE | wc -l`
mpirun -np $NCORE $EXEC >log 2>error
''')

#============================================= chmod_files =============================================

f_list = os.listdir(".")
chmod_f = []
for f in f_list:
    if f.endswith((".sh",".pbs")):
        chmod_f.append(f)

for f in chmod_f:
    os.chmod(f,stat.S_IRWXU+stat.S_IXGRP+stat.S_IRGRP+stat.S_IXOTH)

#========================================= ================ =========================================
print("\nCongratulation! INCAR, KPOINTS POTCAR and vasp_job.sh have been generated!\n")
print("="*92)
